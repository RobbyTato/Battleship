import keyboard
import print_screen as ps
import colorama
import logging
from time import sleep
from user import User
from bot import Bot
from colorama import Fore, Back, Style

logging.basicConfig(level=logging.DEBUG, filename="logs.txt", filemode="w", format="%(message)s")

colorama.init()

# Logo generated by https://patorjk.com/software/taag/ (Font Name: Roman)
title = r'''
oooooooooo.                .       .   oooo                     oooo         o8o
`888'   `Y8b             .o8     .o8   `888                     `888         `"'
 888     888  .oooo.   .o888oo .o888oo  888   .ooooo.   .oooo.o  888 .oo.   oooo  oo.ooooo.
 888oooo888' `P  )88b    888     888    888  d88' `88b d88(  "8  888P"Y88b  `888   888' `88b
 888    `88b  .oP"888    888     888    888  888ooo888 `"Y88b.   888   888   888   888   888
 888    .88P d8(  888    888 .   888 .  888  888    .o o.  )88b  888   888   888   888   888
o888bood8P'  `Y888""8o   "888"   "888" o888o `Y8bod8P' 8""888P' o888o o888o o888o  888bod8P'
                                                                                   888
                                                                                  o888o
'''

player_wins = r'''
ooooooooo.   oooo                                                                  o8o                      
`888   `Y88. `888                                                                  `"'                      
 888   .d88'  888   .oooo.   oooo    ooo  .ooooo.  oooo d8b      oooo oooo    ooo oooo  ooo. .oo.    .oooo.o
 888ooo88P'   888  `P  )88b   `88.  .8'  d88' `88b `888""8P       `88. `88.  .8'  `888  `888P"Y88b  d88(  "8
 888          888   .oP"888    `88..8'   888ooo888  888            `88..]88..8'    888   888   888  `"Y88b. 
 888          888  d8(  888     `888'    888    .o  888             `888'`888'     888   888   888  o.  )88b
o888o        o888o `Y888""8o     .8'     `Y8bod8P' d888b             `8'  `8'     o888o o888o o888o 8""888P'
                             .o..P'                                                                                    
                             `Y8P'
'''

bot_wins = r'''
oooooooooo.                .                          o8o                       
`888'   `Y8b             .o8                          `"'                       
 888     888  .ooooo.  .o888oo      oooo oooo    ooo oooo  ooo. .oo.    .oooo.o 
 888oooo888' d88' `88b   888         `88. `88.  .8'  `888  `888P"Y88b  d88(  "8 
 888    `88b 888   888   888          `88..]88..8'    888   888   888  `"Y88b.  
 888    .88P 888   888   888 .         `888'`888'     888   888   888  o.  )88b 
o888bood8P'  `Y8bod8P'   "888"          `8'  `8'     o888o o888o o888o 8""888P' 
'''

controls = r'''
â € ðŸ¡…          W
ðŸ¡„   ðŸ¡†  or  A   D to navigate
  ðŸ¡‡          S
   
   Enter to select/confirm
'''


def menu_screen():
    menu_options = ["Play", "Controls", "Exit"]
    option = 0
    menu_text = ps.add_lines(
        ["", "â®ž  " + Back.WHITE + Fore.BLACK + "Play" + Style.RESET_ALL + "  â®œ", "", "Controls", "", "Exit"], title,
        center=True)
    ps.print_screen(menu_text)

    while True:

        # process keyboard input
        key = keyboard.read_event()
        if key.event_type == "up" or key.name not in ("s", "down", "w", "up", "enter"):
            continue
        if key.name in ("s", "down"):
            if option == len(menu_options) - 1:
                option = 0
            else:
                option += 1
        if key.name in ("w", "up"):
            if option == 0:
                option = len(menu_options) - 1
            else:
                option -= 1
        if key.name == "enter":
            return menu_options[option]

        # reload menu
        b = title
        for i in range(len(menu_options)):
            b = ps.add_line("", b)
            if i == option:
                b = ps.add_line("â®ž  " + Back.WHITE + Fore.BLACK + menu_options[i] + Style.RESET_ALL + "  â®œ", b,
                                center=True)
            else:
                b = ps.add_line(menu_options[i], b, center=True)
        ps.print_screen(b)


def check_sunk(player):
    """function that checks if a ship has been sunk and returns ship letter and coordinates of each part of the ship

    Args:
        player (Player): the player whose ship_board to check for sunk ships

    Returns:
        tuple: returns a tuple containing letter of ship sunk along with the coordinates of each part of the ship
               e.g. ('p', ((0,1), (0,0)))
    """    

    ships_not_sunk = [i for i in ('c', 'd', 'b', 's', 'p') if i not in player.sunk_ships]

    ship_coords = {'c':[], 'd':[], 'b':[], 's':[], 'p':[]}
    
    for ship in ships_not_sunk:

        count = 0

        for row_idx, row in enumerate(player.ship_board):

            if ship not in row:

                count += 1

                for column_idx, board_value in enumerate(row):

                    if len(board_value) == 2:
                        ship_coords[board_value[0]].append((row_idx, column_idx))

        if count == len(player.ship_board):
            player.sunk_ships.append(ship)
            return (ship, ship_coords[ship])
        

def game():
    # 10 x 10 board grid

    # Ship name     Ship size    Name on board (eg. "c")
    # Carrier	    5            c
    # Battleship    4            b
    # Destroyer	    3            d
    # Submarine	    3            s
    # Patrol Boat   2            p

    # Only strings in the shot boards are "O" for miss, "X" for hit, "+" for sunk, and "-" for empty

    ships = {"c": ["Carrier", 5],
             "b": ["Battleship", 4],
             "d": ["Destroyer", 3],
             "s": ["Submarine", 3],
             "p": ["Patrol board", 2]}

    player = User()
    bot = Bot()

    player.place_ships()
    bot.place_ships()

    is_player_turn = True
    while True:
        if is_player_turn:
            shot = player.take_shot()[::-1]
            result = player.update_boards_on_shot(shot, bot.ship_board)
            sunk = check_sunk(bot)
            top_text = "Player's turn to take a shot"
            if result == "O":
                bottom_text = "Miss!"
            elif result == "X" and not sunk:
                bottom_text = "Hit!"
            else:
                bottom_text = f"Hit! Sunk {ships[sunk[0]][0]} {ships[sunk[0]][1]}x1"
            player.display_shot_board(top_text=top_text, bottom_text=bottom_text)
            sleep(2)
            is_player_turn = False
        else:
            shot = bot.find_next_shot()
            result = bot.update_boards_on_shot(shot, player.ship_board)
            sunk = check_sunk(player)
            top_text = "Bot's turn to take a shot"
            if result == "O":
                bottom_text = "Miss!"
            elif result == "X" and not sunk:
                bottom_text = "Hit!"
            else:
                bottom_text = f"Hit! Sunk {ships[sunk[0]][0]} {ships[sunk[0]][1]}x1"
            bot.display_shot_board(top_text=top_text, bottom_text=bottom_text)
            sleep(2)
            is_player_turn = True
        if set(player.sunk_ships) == {"c", "b", "d", "s", "p"}:
            ps.print_screen(bot_wins)
            keyboard.wait('enter')
            break
        elif set(bot.sunk_ships) == {"c", "b", "d", "s", "p"}:
            ps.print_screen(player_wins)
            keyboard.wait('enter')
            break


if __name__ == "__main__":
    while True:
        choice = menu_screen()
        if choice == "Play":
            game()
        if choice == "Controls":
            ps.print_screen(controls)
            keyboard.wait('enter')
        if choice == "Exit":
            break
